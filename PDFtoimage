<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>PDF to Image Converter</title>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.4.120/pdf.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/jszip/3.10.1/jszip.min.js"></script>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css">
  <style>
    :root {
      --primary: #4361ee;
      --primary-light: #4895ef;
      --secondary: #3f37c9;
      --dark: #1a1a2e;
      --light: #f8f9fa;
      --gray: #6c757d;
      --success: #4cc9f0;
      --warning: #f72585;
    }

    * {
      box-sizing: border-box;
      margin: 0;
      padding: 0;
    }

    body {
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      background-color: #f5f7ff;
      color: var(--dark);
      line-height: 1.6;
      min-height: 100vh;
      padding: 20px;
    }

    .container {
      max-width: 1000px;
      margin: 0 auto;
      padding: 20px;
    }

    header {
      text-align: center;
      margin-bottom: 2rem;
      animation: fadeInDown 0.6s;
    }

    h1 {
      color: var(--primary);
      margin-bottom: 0.5rem;
      font-size: 2.2rem;
    }

    .subtitle {
      color: var(--gray);
      font-size: 1.1rem;
    }

    .card {
      background: white;
      border-radius: 12px;
      box-shadow: 0 10px 20px rgba(0, 0, 0, 0.08);
      padding: 30px;
      margin-bottom: 30px;
      transition: all 0.3s ease;
      animation: fadeIn 0.8s;
    }

    .drop-zone {
      border: 2px dashed var(--primary-light);
      border-radius: 10px;
      padding: 40px 20px;
      text-align: center;
      cursor: pointer;
      transition: all 0.3s ease;
      position: relative;
      min-height: 200px;
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      background-color: rgba(72, 149, 239, 0.05);
    }

    .drop-zone.active {
      border-color: var(--primary);
      background-color: rgba(72, 149, 239, 0.1);
      transform: translateY(-2px);
    }

    .drop-zone i {
      font-size: 3rem;
      color: var(--primary);
      margin-bottom: 1rem;
    }

    .drop-text {
      font-size: 1.2rem;
      margin-bottom: 1rem;
      color: var(--dark);
    }

    .browse-btn {
      background: var(--primary);
      color: white;
      border: none;
      padding: 10px 20px;
      border-radius: 6px;
      cursor: pointer;
      font-weight: 500;
      transition: all 0.3s ease;
      display: inline-flex;
      align-items: center;
      gap: 8px;
    }

    .browse-btn:hover {
      background: var(--secondary);
      transform: translateY(-2px);
      box-shadow: 0 4px 12px rgba(67, 97, 238, 0.3);
    }

    .browse-btn i {
      font-size: 1.2rem;
    }

    #fileInput {
      display: none;
    }

    .preview-container {
      display: flex;
      flex-wrap: wrap;
      gap: 15px;
      margin-top: 20px;
      justify-content: center;
    }

    .preview-page {
      border: 1px solid #e9ecef;
      border-radius: 8px;
      padding: 10px;
      background: white;
      max-width: 180px;
      box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
      transition: all 0.3s ease;
      animation: fadeIn 0.5s;
    }

    .preview-page:hover {
      transform: translateY(-3px);
      box-shadow: 0 6px 12px rgba(0, 0, 0, 0.1);
    }

    .preview-page img {
      max-width: 100%;
      height: auto;
      border-radius: 4px;
    }

    .preview-page p {
      text-align: center;
      margin-top: 8px;
      font-weight: 500;
      color: var(--dark);
    }

    .controls {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
      gap: 20px;
      margin: 25px 0;
    }

    .control-group {
      display: flex;
      flex-direction: column;
    }

    label {
      margin-bottom: 8px;
      font-weight: 500;
      color: var(--dark);
      display: flex;
      align-items: center;
      gap: 6px;
    }

    label i {
      color: var(--primary);
    }

    select, input[type="range"], input[type="text"] {
      padding: 12px 15px;
      border: 1px solid #dee2e6;
      border-radius: 8px;
      font-size: 1rem;
      transition: all 0.3s ease;
      background: white;
    }

    select:focus, input[type="text"]:focus {
      outline: none;
      border-color: var(--primary);
      box-shadow: 0 0 0 3px rgba(67, 97, 238, 0.2);
    }

    input[type="range"] {
      -webkit-appearance: none;
      height: 8px;
      background: #e9ecef;
      border-radius: 4px;
      padding: 0;
    }

    input[type="range"]::-webkit-slider-thumb {
      -webkit-appearance: none;
      width: 20px;
      height: 20px;
      background: var(--primary);
      border-radius: 50%;
      cursor: pointer;
      transition: all 0.2s ease;
    }

    input[type="range"]::-webkit-slider-thumb:hover {
      transform: scale(1.1);
      background: var(--secondary);
    }

    .dpi-value {
      display: inline-block;
      min-width: 40px;
      text-align: center;
      font-weight: bold;
      color: var(--primary);
    }

    .action-buttons {
      display: flex;
      justify-content: flex-end;
      gap: 15px;
      margin-top: 20px;
    }

    .btn {
      padding: 12px 24px;
      border-radius: 8px;
      font-weight: 500;
      cursor: pointer;
      transition: all 0.3s ease;
      display: inline-flex;
      align-items: center;
      gap: 8px;
      border: none;
    }

    .btn-primary {
      background: var(--primary);
      color: white;
    }

    .btn-primary:hover {
      background: var(--secondary);
      transform: translateY(-2px);
      box-shadow: 0 4px 12px rgba(67, 97, 238, 0.3);
    }

    .btn-secondary {
      background: white;
      color: var(--primary);
      border: 1px solid var(--primary);
    }

    .btn-secondary:hover {
      background: rgba(67, 97, 238, 0.05);
      transform: translateY(-2px);
    }

    .btn:disabled {
      background: #e9ecef;
      color: #adb5bd;
      cursor: not-allowed;
      transform: none !important;
      box-shadow: none !important;
    }

    .progress-container {
      width: 100%;
      height: 10px;
      background: #e9ecef;
      border-radius: 5px;
      margin: 25px 0;
      overflow: hidden;
      display: none;
    }

    .progress-bar {
      height: 100%;
      background: linear-gradient(90deg, var(--primary-light), var(--primary));
      width: 0%;
      transition: width 0.3s ease;
      border-radius: 5px;
    }

    .status {
      text-align: center;
      margin: 15px 0;
      font-weight: 500;
      min-height: 24px;
      color: var(--primary);
    }

    .loading {
      display: inline-block;
      width: 20px;
      height: 20px;
      border: 3px solid rgba(255, 255, 255, 0.3);
      border-radius: 50%;
      border-top-color: white;
      animation: spin 1s ease-in-out infinite;
    }

    @keyframes spin {
      to { transform: rotate(360deg); }
    }

    @keyframes fadeIn {
      from { opacity: 0; }
      to { opacity: 1; }
    }

    @keyframes fadeInDown {
      from {
        opacity: 0;
        transform: translateY(-20px);
      }
      to {
        opacity: 1;
        transform: translateY(0);
      }
    }

    @keyframes pulse {
      0% { transform: scale(1); }
      50% { transform: scale(1.05); }
      100% { transform: scale(1); }
    }

    /* Mobile styles */
    @media (max-width: 768px) {
      .container {
        padding: 15px;
      }

      h1 {
        font-size: 1.8rem;
      }

      .subtitle {
        font-size: 1rem;
      }

      .card {
        padding: 20px;
      }

      .drop-zone {
        padding: 30px 15px;
      }

      .controls {
        grid-template-columns: 1fr;
      }

      .action-buttons {
        flex-direction: column;
      }

      .btn {
        width: 100%;
        justify-content: center;
      }
    }

    /* Icon font for UI elements */
    .material-icons {
      font-family: 'Material Icons';
      font-weight: normal;
      font-style: normal;
      font-size: 24px;
      line-height: 1;
      letter-spacing: normal;
      text-transform: none;
      display: inline-block;
      white-space: nowrap;
      word-wrap: normal;
      direction: ltr;
      -webkit-font-feature-settings: 'liga';
      -webkit-font-smoothing: antialiased;
    }
  </style>
  <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
</head>
<body>
  <div class="container animate__animated animate__fadeIn">
    <header>
      <h1>PDF to Image Converter</h1>
      <p class="subtitle">Convert your PDF pages to high-quality images in seconds</p>
    </header>

    <main>
      <div class="card">
        <div class="drop-zone" id="dropZone">
          <i class="material-icons">cloud_upload</i>
          <p class="drop-text">Drag & drop your PDF file here</p>
          <button class="browse-btn" id="browseBtn">
            <i class="material-icons">folder_open</i>
            Browse Files
          </button>
          <input type="file" id="fileInput" accept=".pdf">
        </div>

        <div id="preview" class="preview-container"></div>
      </div>

      <div class="card">
        <div class="controls">
          <div class="control-group">
            <label for="format"><i class="material-icons">photo_filter</i> Output Format:</label>
            <select id="format">
              <option value="jpeg">JPEG</option>
              <option value="png">PNG</option>
              <option value="webp">WebP</option>
            </select>
          </div>
          
          <div class="control-group">
            <label for="dpi"><i class="material-icons">quality_high</i> Quality:</label>
            <input type="range" id="dpi" min="72" max="600" value="150">
            <span class="dpi-value" id="dpiValue">150</span> DPI
          </div>
          
          <div class="control-group">
            <label for="pages"><i class="material-icons">filter</i> Pages:</label>
            <input type="text" id="pages" placeholder="All pages (e.g., 1,3-5)">
          </div>
        </div>

        <div class="progress-container" id="progressContainer">
          <div class="progress-bar" id="progressBar"></div>
        </div>

        <div class="status" id="status"></div>

        <div class="action-buttons">
          <button class="btn btn-secondary" id="resetBtn">
            <i class="material-icons">refresh</i>
            Reset
          </button>
          <button class="btn btn-primary" id="convertBtn">
            <i class="material-icons">image</i>
            Convert to Images
          </button>
        </div>
      </div>
    </main>
  </div>

  <script>
    // Initialize PDF.js worker
    pdfjsLib.GlobalWorkerOptions.workerSrc = 'https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.4.120/pdf.worker.min.js';
    
    // DOM elements
    const dropZone = document.getElementById('dropZone');
    const fileInput = document.getElementById('fileInput');
    const browseBtn = document.getElementById('browseBtn');
    const preview = document.getElementById('preview');
    const formatSelect = document.getElementById('format');
    const dpiSlider = document.getElementById('dpi');
    const dpiValue = document.getElementById('dpiValue');
    const pagesInput = document.getElementById('pages');
    const convertBtn = document.getElementById('convertBtn');
    const resetBtn = document.getElementById('resetBtn');
    const progressContainer = document.getElementById('progressContainer');
    const progressBar = document.getElementById('progressBar');
    const status = document.getElementById('status');
    
    let currentFile = null;
    
    // Event listeners
    browseBtn.addEventListener('click', () => fileInput.click());
    dropZone.addEventListener('dragover', (e) => {
      e.preventDefault();
      dropZone.classList.add('active');
    });
    dropZone.addEventListener('dragleave', () => {
      dropZone.classList.remove('active');
    });
    dropZone.addEventListener('drop', (e) => {
      e.preventDefault();
      dropZone.classList.remove('active');
      if (e.dataTransfer.files.length) {
        handleFile(e.dataTransfer.files[0]);
      }
    });
    fileInput.addEventListener('change', () => {
      if (fileInput.files.length) {
        handleFile(fileInput.files[0]);
      }
    });
    dpiSlider.addEventListener('input', updateDpiValue);
    convertBtn.addEventListener('click', convertToImages);
    resetBtn.addEventListener('click', resetConverter);
    
    // Update DPI value display
    function updateDpiValue() {
      dpiValue.textContent = dpiSlider.value;
      dpiValue.classList.add('animate__animated', 'animate__pulse');
      setTimeout(() => {
        dpiValue.classList.remove('animate__animated', 'animate__pulse');
      }, 500);
    }
    
    // Handle selected file
    function handleFile(file) {
      if (file.type !== 'application/pdf') {
        showStatus('Please select a PDF file', 'warning');
        return;
      }
      
      currentFile = file;
      showStatus('Loading PDF preview...', 'info');
      renderPreview(file);
      
      // Pulse animation for visual feedback
      dropZone.classList.add('animate__animated', 'animate__pulse');
      setTimeout(() => {
        dropZone.classList.remove('animate__animated', 'animate__pulse');
      }, 500);
    }
    
    // Render PDF preview
    async function renderPreview(file) {
      preview.innerHTML = '<div class="animate__animated animate__fadeIn" style="width:100%;text-align:center;"><i class="material-icons" style="font-size:3rem;color:var(--primary);">hourglass_top</i><p>Loading preview...</p></div>';
      
      try {
        const pdf = await pdfjsLib.getDocument(URL.createObjectURL(file)).promise;
        const previewPages = Math.min(pdf.numPages, 3); // Show first 3 pages
        
        let html = '';
        for (let i = 1; i <= previewPages; i++) {
          const page = await pdf.getPage(i);
          const viewport = page.getViewport({ scale: 0.5 });
          
          const canvas = document.createElement('canvas');
          const context = canvas.getContext('2d');
          canvas.height = viewport.height;
          canvas.width = viewport.width;
          
          await page.render({
            canvasContext: context,
            viewport: viewport
          }).promise;
          
          html += `
            <div class="preview-page animate__animated animate__fadeIn">
              <img src="${canvas.toDataURL('image/jpeg')}" alt="Page ${i}">
              <p>Page ${i}</p>
            </div>
          `;
        }
        preview.innerHTML = html;
        showStatus(`Loaded ${previewPages} of ${pdf.numPages} pages`, 'success');
      } catch (error) {
        console.error(error);
        preview.innerHTML = '<div class="animate__animated animate__fadeIn" style="width:100%;text-align:center;color:var(--warning);"><i class="material-icons">error</i><p>Error loading preview</p></div>';
        showStatus('Error loading PDF', 'error');
      }
    }
    
    // Parse page range input
    function parsePageRange(rangeStr, totalPages) {
      if (!rangeStr.trim()) return Array.from({ length: totalPages }, (_, i) => i + 1);
      
      const pages = new Set();
      const parts = rangeStr.split(',');
      
      for (const part of parts) {
        if (part.includes('-')) {
          const [start, end] = part.split('-').map(Number);
          const safeStart = Math.max(1, Math.min(start, totalPages));
          const safeEnd = Math.max(1, Math.min(end || start, totalPages));
          
          for (let i = safeStart; i <= safeEnd; i++) {
            pages.add(i);
          }
        } else if (part.trim()) {
          const page = parseInt(part);
          if (!isNaN(page)) {
            pages.add(Math.max(1, Math.min(page, totalPages)));
          }
        }
      }
      
      return Array.from(pages).sort((a, b) => a - b);
    }
    
    // Show status message
    function showStatus(message, type = 'info') {
      status.innerHTML = message;
      status.className = 'status animate__animated animate__fadeIn';
      
      switch(type) {
        case 'error':
          status.style.color = 'var(--warning)';
          break;
        case 'success':
          status.style.color = 'var(--success)';
          break;
        case 'warning':
          status.style.color = 'var(--warning)';
          break;
        default:
          status.style.color = 'var(--primary)';
      }
    }
    
    // Convert PDF to images
    async function convertToImages() {
      if (!currentFile) {
        showStatus('Please select a PDF file first', 'warning');
        return;
      }
      
      convertBtn.disabled = true;
      convertBtn.innerHTML = '<span class="loading"></span> Processing...';
      progressContainer.style.display = 'block';
      progressBar.style.width = '0%';
      showStatus('Starting conversion...', 'info');
      
      try {
        const pdf = await pdfjsLib.getDocument(URL.createObjectURL(currentFile)).promise;
        const totalPages = pdf.numPages;
        const pages = parsePageRange(pagesInput.value, totalPages);
        const format = formatSelect.value;
        const dpi = parseInt(dpiSlider.value);
        
        const images = [];
        
        for (let i = 0; i < pages.length; i++) {
          const pageNum = pages[i];
          showStatus(`Converting page ${pageNum} of ${totalPages}...`, 'info');
          
          const page = await pdf.getPage(pageNum);
          const viewport = page.getViewport({ scale: dpi / 72 });
          
          const canvas = document.createElement('canvas');
          canvas.height = viewport.height;
          canvas.width = viewport.width;
          const context = canvas.getContext('2d');
          
          await page.render({
            canvasContext: context,
            viewport: viewport
          }).promise;
          
          let imageUrl;
          if (format === 'jpeg') {
            imageUrl = canvas.toDataURL('image/jpeg', 0.9);
          } else if (format === 'png') {
            imageUrl = canvas.toDataURL('image/png');
          } else if (format === 'webp') {
            imageUrl = canvas.toDataURL('image/webp', 0.9);
          }
          
          images.push({ url: imageUrl, pageNum });
          
          // Update progress
          const progress = Math.round((i + 1) / pages.length * 100);
          progressBar.style.width = `${progress}%`;
        }
        
        // Download images
        showStatus('Preparing download...', 'info');
        if (images.length > 1) {
          await downloadAsZip(images, format);
          showStatus(`Downloaded ${images.length} pages as ZIP`, 'success');
        } else {
          downloadImage(images[0].url, `page_${images[0].pageNum}.${format}`);
          showStatus('Downloaded image successfully', 'success');
        }
        
      } catch (error) {
        console.error('Conversion error:', error);
        showStatus('Error during conversion', 'error');
      } finally {
        convertBtn.disabled = false;
        convertBtn.innerHTML = '<i class="material-icons">image</i> Convert to Images';
      }
    }
    
    // Download single image
    function downloadImage(url, filename) {
      const link = document.createElement('a');
      link.href = url;
      link.download = filename;
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
    }
    
    // Download multiple images as ZIP
    async function downloadAsZip(images, format) {
      try {
        showStatus('Creating ZIP archive...', 'info');
        const zip = new JSZip();
        const folder = zip.folder('converted_pages');
        
        for (const img of images) {
          const response = await fetch(img.url);
          const blob = await response.blob();
          folder.file(`page_${img.pageNum}.${format}`, blob);
        }
        
        const content = await zip.generateAsync({ type: 'blob' }, (metadata) => {
          const progress = metadata.percent;
          progressBar.style.width = `${progress}%`;
        });
        
        const url = URL.createObjectURL(content);
        downloadImage(url, 'converted_pages.zip');
      } catch (error) {
        console.error('ZIP creation failed:', error);
        showStatus('Falling back to individual downloads', 'warning');
        // Fallback to individual downloads
        for (const img of images) {
          downloadImage(img.url, `page_${img.pageNum}.${format}`);
        }
      }
    }
    
    // Reset converter
    function resetConverter() {
      currentFile = null;
      fileInput.value = '';
      preview.innerHTML = '';
      pagesInput.value = '';
      dpiSlider.value = 150;
      dpiValue.textContent = '150';
      formatSelect.value = 'jpeg';
      progressContainer.style.display = 'none';
      progressBar.style.width = '0%';
      showStatus('Ready to convert', 'info');
      
      // Add animation
      const cards = document.querySelectorAll('.card');
      cards.forEach(card => {
        card.classList.add('animate__animated', 'animate__fadeIn');
        setTimeout(() => {
          card.classList.remove('animate__animated', 'animate__fadeIn');
        }, 1000);
      });
    }
  </script>
</body>
</html>
